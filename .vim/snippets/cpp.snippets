# #include <...>
snippet inc cpp
	#include <${1:iostream}>${2}
# #include "..."
snippet Inc cpp
	#include "${1:`Filename("$1")`}.hpp"${2}
# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r"))
	{
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# std::vector
snippet str
	std::string ${1:str};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`}
	{
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`}
	{
	public:
		$1(${2:arguments});
		virtual ~$1();
	
	private:
		${3:/* data */}
	};${4}
# Try
snippet try
	try
	{
		${3:/* code */}
	}
	catch (${1:/* Caught what? */})
	{
		${2:/* and do what? */}
	}${3}
#fori
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4:/* code */}
	}${5}
snippet fat
	LogFatal(("${1:/* stuff */}"${2}));${3}
snippet err
	LogError(("${1:/* stuff */}"${2}));${3}
snippet war
	LogWarn(("${1:/* stuff */}"${2}));${3}
snippet inf
	LogInfo(("${1:/* stuff */}"${2}));${3}
snippet sta
	LogStamp(("${1:/* stuff */}"${2}));${3}
snippet tr
	LogTrace(("${1:/* stuff */}"${2}));${3}
